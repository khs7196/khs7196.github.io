function on_ready(func) {
	if (document.readyState != 'loading') {
		func();
	} else if (document.addEventListener) {
		document.addEventListener('DOMContentLoaded', func);
	} else {
		document.attachEvent('onreadystatechange', function() {
			if (document.readyState != 'loading') {
				func();
			}
		});
	}
}

on_ready(function redirect_on_xhr_401() {
	if ($.sendHomeOnUnauthorizedError) return;

	$.sendHomeOnUnauthorizedError = true;
	$(document).ajaxComplete(function(event, jqXHR, ajax_options) {
		if (jqXHR.status == 401 /* Unauthorized */) {
			window.location.href = "/index.jsp?p_sGubun=login";
		}
	});
});

$(document).bind("pageinit", function init_global_alert() {
	$("#alert-popup").enhanceWithin().popup();
});

$(document).bind("mobileinit", function init_jqm_config() {
	// disable page transitions in jQuery Mobile because they're annoyingly slow
	$.mobile.defaultPageTransition = 'none';
	
	// ajax prefetch screws up some of the forms
	$.mobile.ajaxEnabled = false;
	
	// DOM caching of pay stubs is a bad idea
	$.mobile.page.prototype.options.domCache = false;

	$.mobile.loader.prototype.options.text = "loading";
	$.mobile.loader.prototype.options.textVisible = false;
	$.mobile.loader.prototype.options.theme = "a";
	$.mobile.loader.prototype.options.html = "";	
});

function clamp_time(date, min, max) {
	var time = Math.min(max.getTime(), Math.max(min.getTime(), date.getTime()));
	var new_date = new Date();
	new_date.setTime(time);
	return new_date;
}

function is_time_in_range(dt, start_dt, end_dt) {
	var dt_time = dt.getTime();
	return start_dt.getTime() <= dt_time && dt_time <= end_dt.getTime();
}

function sapDateToDottedString(sap_date) {
	var date_expr = /^\s*(\d{4})(\d{2})(\d{2})\s*$/;
	var parts = date_expr.exec(sap_date);
	if (parts)
		return parts[2] + "." + parts[3] + "." + parts[1];
}

function datetimeToString(datetime) {
	return dateToDottedString(datetime) + " "
		 + timeToString(datetime);
}

function timeToString(time) {
	return leftPad(time.getHours(), 2, "0") + ":"
	     + leftPad(time.getMinutes(), 2, "0");
}

function dateToDottedString(date) {
	return leftPad(date.getMonth()+1, 2, "0") + "." 
		+ leftPad(date.getDate(), 2, "0") + "." 
		+ date.getFullYear();
}

function getDatetimeObject(datetime_str) {
	var datetimeExp = /^\s*(\d\d)\.(\d\d)\.(\d{4})\s*(\d\d):(\d\d)\s*$/,
	parts = datetimeExp.exec(datetime_str),
	datetime = new Date(NaN),
	month;
	
	if (parts) {
		month = +parts[1];
		datetime.setFullYear(parts[3], month - 1, parts[2]);
		datetime.setHours(parts[4]);
		datetime.setMinutes(parts[5]);
		if(month != datetime.getMonth() + 1) {
			datetime.setTime(NaN);
		}
	}
	return datetime;
}

function getDateObject(date_str) {
	var dateExp = /^\s*(\d\d)\.(\d\d)\.(\d{4})\s*$/,
    date = new Date(NaN), 
    month,
    parts = dateExp.exec(date_str);

	if(parts) {
	  month = +parts[1];
	  date.setFullYear(parts[3], month - 1, parts[2]);
	  if(month != date.getMonth() + 1) {
		date.setTime(NaN);
	  }
	}
	return date;
}

function leftPad(src, len, c) {
	if (typeof(src) != "string") {
		var x = src + "";
	} else {
		var x = src;	
	}
	
	while(x.length < len) {
		x = c + x;
	}
	
	return x;
}

function changeLanguage(event) {
	// Language key
	if (typeof event === "string") {
		var locale = event;
	} else {
		event.preventDefault();
		var $lang_sel = $(event.srcElement)
		var locale = $lang_sel.val();
	}
	document.cookie = "USER_LANG=" + locale + "; expires=0;";
	window.location.reload(true);
}

function showAlertPopup(opts) {
	var $popup = $("#alert-popup");
	$popup.find("#alert-popup-body").text(opts["msg"]);
	if (opts["close"]) {
		$popup.popup({
			afterclose: function(event, ui) {
				opts["close"]();
			}
		});
	}
	if (opts["timed_close"]) {
		setTimeout(function() { $popup.popup("close"); }, opts["timed_close"]);
	}
	$popup.popup("open");
}

String.prototype.format = function() {
	a = this;
	for (k in arguments) {
		a = a.replace("{" + k + "}", arguments[k]);
	}
	return a;
}

function setSelectValue(selector, value) {
	var e = $(selector);
	e.val(value)
	 .attr('selected', true)
	 .siblings('option')
	 .prop('selected', false);
	e.selectmenu("refresh", true);
}


function GoLogout(){
	document.location.href = '/index.jsp?p_sGubun=logout';
}

function GoHome(){
	document.location.href = '/main.jsp';
}

// Polyfill for Element.closest() to find the closest element matching the CSS selector.
// IE9+
if (!Element.prototype.matches) {
	Element.prototype.matches = Element.prototype.msMatchesSelector ||
	                            Element.prototype.webkitMatchesSelector;
}

if (!Element.prototype.closest) {
	Element.prototype.closest = function(s) {
		var el = this;
		if (!document.documentElement.contains(el)) return null;
		do {
			if (el.matches(s)) return el;
			el = el.parentElement || el.parentNode;
		} while(el !== null && el.nodeType === 1);
		return null;
	};
}


/////////////////////////
// Legacy Cruft below
/////////////////////////

var _SPINNER = null;    // 로딩바 객체 변수
 
/* 로딩바 보이기 */
function gfnSetStartSpinner(tObj) {
    
    var opts = {
          lines: 15                // The number of lines to draw
        , length: 15             // The length of each line
        , width: 10             // The line thickness
        , radius: 32             // The radius of the inner circle
        , scale: 1                 // Scales overall size of the spinner
        , corners: 1             // Corner roundness (0..1)
        , color: '#0088cc'         // #rgb or #rrggbb or array of colors
        , opacity: 0.25         // Opacity of the lines
        , rotate: 0             // The rotation offset
        , direction: 1             // 1: clockwise, -1: counterclockwise
        , speed: 1                 // Rounds per second
        , trail: 60             // Afterglow percentage
        , fps: 20                 // Frames per second when using setTimeout() as a fallback for CSS
        , zIndex: 2e9             // The z-index (defaults to 2000000000)
        , className: 'spinner'     // The CSS class to assign to the spinner
        , top: '46%'             // Top position relative to parent
        , left: '50%'             // Left position relative to parent
        , shadow: false         // Whether to render a shadow
        , hwaccel: false         // Whether to use hardware acceleration
        , position: 'absolute'     // Element positioning
    };
 
    var target = document.getElementById(tObj);
    
    if (_SPINNER == null) {
        _SPINNER = new Spinner(opts).spin(target);
    }
}
 
/* 로딩바 숨기기 */
function gfnSetStopSpinner() {
 
   if (_SPINNER != null) {
        _SPINNER.stop();
        _SPINNER = null;
    }
}

function gfnPopOpen(w,h,f,target){
	var winl = (window.screen.width - w) / 2; 
	var wint = (window.screen.height - h) / 2; 
	var wloc = 'width='+w+',height='+h+', noresize, toolbar=no,location=no,directories=no,status=no,menubar=no, top='+wint+', left='+winl;
	winalc = window.open(f,target,wloc);
}

function gfnPopOpenScroll(w,h,f, target){
	var winl = (window.screen.width - w) / 2; 
	var wint = (window.screen.height - h) / 2; 
	var wloc = 'width='+w+',height='+h+', scrollbars=yes, noresize, toolbar=no, menubar=no, top='+wint+', left='+winl;
	winalc = window.open(f,target,wloc);
}

function gfnChkNumPositive(toCheck){
    var chkStr = toCheck+"" ;
    var isNum  = true ;

    for (j = 0 ; isNum && (j < chkStr.length) ; j++){
        if ((chkStr.substring(j,j+1) < "0") || (chkStr.substring(j,j+1) > "9")){
            isNum = false ;
        }
    }
    return isNum;
}

/**
 * @type   : function
 * @access : public
 * @desc   : 
 * @param  : toCheck  - check data
 * @param  : totLen   - total length
 * @param  : primeLen - below dot length
 * @param  : limit    - 
 * @return : true  - Number
             false - Not Number
 */
function gfnChkNum( toCheck, totLen, primeLen ){
    var isNum       = true ;
    var dotIndex    = 0 ;
    var nStr        = toCheck+"" ;  // jungsoo
    var pStr        = "" ;          // sosoo

    dotIndex = toCheck.lastIndexOf(".") ;

    if ( gfnChkNull(nStr) ) return false;

    if ( dotIndex != -1 )           // num have sosoo
    {
        pStr = toCheck.substr(dotIndex+1) ;
        if ( (primeLen > 0 && pStr.length > primeLen) || toCheck.substring(toCheck.length-1)=="." )
        {
            return false ;
        }

        if ( !gfnChkNumPositive ( pStr ))
        {
            return false ;
        }
        nStr = toCheck.substr(0,dotIndex) ;
    }

    if ( primeLen > 0 && nStr.length > totLen-primeLen )
    {
        return false ;
    }

    for (j = 0 ; isNum && (j < nStr.length) ; j++)
    {
        if ((nStr.substring(j,j+1) < "0") || (nStr.substring(j,j+1) > "9"))
        {
            if ( nStr.substring(j,j+1) == "-" )
            {
                if ( j != 0 )
                {
                   isNum = false;
                }
            }
            else
                isNum = false ;
        }
    }
    if ( nStr == "-" ) isNum = false ;
    return isNum;
}


function trim(chkCharIs) {
	var chkSpaceChar = /\s+/g;
	return chkCharIs.replace(chkSpaceChar, '');
}